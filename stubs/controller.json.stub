<?php

namespace {{ namespace }};

use Illuminate\Http\Request;
use {{ rootNamespace }}Http\Controllers\Controller;
use {{ rootNamespace }}Services\{{ service }}\{{ service }}Service;

class {{ class }} extends Controller
{
    protected ${{ serviceVariable }}Service;

    public function __construct({{ service }}Service ${{ serviceVariable }}Service) {
        $this->{{ serviceVariable }}Service = ${{ serviceVariable }}Service;
    }

    public function index(Request $request)
    {
        ${{ serviceVariablePlural }} = $this->{{ serviceVariable }}->query($request->all())->paginate();

        return response()->json([
            'hasError' => false,
            'paginated' => ${{ serviceVariablePlural }},
        ]);
    }

    public function store(Request $request)
    {
        ${{ serviceVariable }} = $this->{{ serviceVariable }}Service->create($request->all());

        if ($result->hasError()) {
            return response()->json([
                'hasError' => true,
                'message' => $result->errorMessage,
                'errors' => $result->detailError->validator->errors(),
            ]);
        }

        return response()->json([
            'hasError' => false,
        ]);
    }

    public function show(Request $request, $id)
    {
        ${{ modelVariable }} = $this->{{ serviceVariable }}->find($id);

        if (!${{ modelVariable }}) {
            return response()->json([
                'hasError' => true,
                'message' => 'Not found'
            ], 404);
        }

        return response()->json([
            'hasError' => false,
            '{{ modelVariable }}' => ${{ modelVariable }},
        ]);
    }

    public function update(Request $request, $id)
    {
        ${{ modelVariable }} = $this->{{ serviceVariable }}->find($id);

        if (!${{ modelVariable }}) {
            return response()->json([
                'hasError' => true,
                'message' => 'Not found'
            ], 404);
        }

        $result = $this->{{ serviceVariable }}->update(${{ modelVariable }}, $request->all());

        if ($result->hasError()) {
            return response()->json([
                'hasError' => true,
                'message' => $result->errorMessage,
                'errors' => $result->detailError->validator->errors(),
            ], 406);
        }

        return response()->json([
            'hasError' => false,
        ]);
    }

    public function delete(Request $request, $id)
    {
        ${{ modelVariable }} = $this->{{ serviceVariable }}->find($id);

        if (!${{ modelVariable }}) {
            return response()->json([
                'hasError' => true,
                'message' => 'Not found'
            ], 404);
        }

        $result = $this->{{ serviceVariable }}->delete(${{ modelVariable }});

        if ($result->hasError()) {
            return response()->json([
                'hasError' => true,
                'message' => $result->errorMessage,
            ], 406);
        }

        return response()->json([
            'hasError' => false,
        ]);
    }
}
